Things. to do:
Load in a large gltf scene and view how Orbit Controls will feel then.
    Maybe add in a texture background

Test. 2 - 3D Text https://drei.pmnd.rs/?path=/story/abstractions-text--text-st
Place Drei's Droika Text component physically in the world
Does not work inside Fiber Html elements

Test. 3 - Cannon ES Impulse with 3D Text
Use Cannon API to add impulse?
    Add a cannon useBox collider around the Text
    Add a giant Plane underneath so we can see it land.
    Add impulse on click. Direction is ... Z axis?
Double render - Outline, normal Text, impulse normal Text?

Test. 4 - Float, Cam Shake
Float https://github.com/pmndrs/drei#float
Staging CameraShake https://drei.pmnd.rs/?path=/story/staging-camerashake--camera-shake-with-orbit-controls-story

Look into using tween to animate rotation on Z axis and transformations along x axis

Test. 5 - Environment (HDRI Haven)

Page. Ideas Draft
Page 1 - slowly rotating bonfire from DS
Page 2
- Droika text CI/CD
- Made from grouped block "bricks", some of which can be pushed over
Page 3 - normal React page

One scroll should scroll whole page
Little dot marker showing how many pages

Highlight. Objects: DONE
onHover, highlight cubes
rotate all individual cubes on y axis
    conflict with useSpring in R3Spring and R3Cannon ...
    
Camera. Movement Test 1: DONE
a React component (in Canvas, Html) is clicked on and the canvas camera moves to another position in the scene smoothly
useThree() hook to get the canvas' camera position and quaternion, store these initial values
Move the camera and lookAt the new object, store these destination position and quaternion values
Reset position and quaternion to initial values
.slerp to destination position and values in useFrame hook

Using Matrix transformations to move and rotate the camera (https://threejs.org/docs/#manual/en/introduction/Matrix-transformations)
save initial position and quaternion
move camera to target object (this will be the center of/inside the object) and add new THREE.Vector3(2, 3, 3) to position camera away from object
make camera lookAt target object
save destination position and quaternion
move camera back to initial position and quaternion
    object.matrix.setRotationFromQuaternion( start_quaternion );
    object.matrix.setPosition( start_position );
useFrame 
    lerp camera position to stored destination position
    slerp camera quaternion to stored destination quaternion

can also use react-spring to handle the transition between rotations or positions, but it seems to conflict with Cannon. Cannon also does not work with today's new release of Fiber :/

Camera. Movement v2: DONE
refactor code to remove animate state. useFrame doesn't need a conditional- it should always move towards a target, and we should update these global target variables.
refactor the component and behaviour hierarchy so this logic can be reused properly in a personal site
    highest level component
    holds a state of target variables
    the useFrame hook that constantly moves camera toward target
    interactive child components 
    pass in function to update target variables as props
    these components should store their external cam co-ordinates and the lookAt co-ordinates can be passed to prop function above using event.object etc
